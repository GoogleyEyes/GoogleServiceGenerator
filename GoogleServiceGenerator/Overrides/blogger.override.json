{
  "modelClasses": {
    "BloggerCommentAuthor": {
      "properties": {
        "image": {
          "type": "BloggerCommentAuthorImage"
        }
      }
    },
    "BloggerPageAuthor": {
      "properties": {
        "image": {
          "type": "BloggerPageAuthorImage"
        }
      }
    },
    "BloggerPostAuthor": {
        "properties": {
            "image": {
                "type": "BloggerPostAuthorImage"
            }
        }
    }
  },
  "enums": {
    "posts.view": {
      "ADMIN": "admin",
      "AUTHOR": "author",
      "READER": "reader"
    },
    "blogs.view": {
        "ADMIN": "admin",
        "AUTHOR": "author",
        "READER": "reader"
    },
    "pages.view": {
        "ADMIN": "admin",
        "AUTHOR": "author",
        "READER": "reader"
    },
    "comments.view": {
        "ADMIN": "admin",
        "AUTHOR": "author",
        "READER": "reader"
    },
    "postUserInfos.view": {
        "ADMIN": "admin",
        "AUTHOR": "author",
        "READER": "reader"
    },
    "blogs.role": {
        "ADMIN": "admin",
        "AUTHOR": "author",
        "READER": "reader"
    },
    "blogs.status": {
      "DELETED": "deleted",
      "LIVE": "live"
    },
    "pageViews.range": {
      "30DAYS": "x30Days",
      "7DAYS": "x7Days"
    }
  },
  "serviceClass": {
    "scopesEnum": {
        "Blogger": "blogger"
    }
    "params": {
      "quotaUser": {
        "name": "quotaUserId"
      },
      "alt": {
        "defaultValue": ".json"
      }
    },
    "methods": {
      "postUserInfos.list": {
        "queryParams": {
            "orderBy": {
                "defaultValue": ".published"
            }
        },
        "paramNames": {
          "0": "forUserId"
        }
      },
      "postUserInfos.get": {
        "baseName": "getPostUserInfo",
        "paramNames": {
          "0": "forUserId"
        }
      },
      "pageViews.get": {
        "paramNames": {
          "0": "forBlogWithId"
        }
      },
      "posts.insert": {
        "baseName": "insertPost",
        "paramNames": {
          "0": "_",
          "1": "toBlogWithId"
        }
      },
      "posts.publish": {
        "fullMethodName": "publishPost(withId postId: String, toBlogWithId blogId: String, completionHandler: @escaping (_ result: GoogleResult<BloggerPost>) -> ())"
      },
      "posts.delete": {
        "fullMethodName": "deletePost(withId postId: String, fromBlogWithId blogId: String, completionHandler: @escaping (_ result: GoogleResult<Bool>) -> ())"
      },
      "posts.patch": {
        "baseName": "patchPost",
        "paramNames": {
          "0": "_",
          "1": "forPostID"
        }
      },
      "posts.getByPath": {
        "baseName": "getPost",
        "paramNames": {
          "0": "byPath"
        }
      },
      "posts.update": {
        "baseName": "updatePost",
        "paramNames": {
          "0": "_",
          "1": "withPostId"
        }
      },
      "posts.get": {
        "fullMethodName": "getPost(withId postId: String, blogId: String, completionHandler: @escaping (_ result: GoogleResult<BloggerPost>) -> ())"
      },
      "posts.revert": {
        "fullMethodName": "revertPost(withId postId: String, blogId: String, completionHandler: @escaping (_ result: GoogleResult<BloggerPost>) -> ())"
      },
      "posts.search": {
        "paramNames": {
          "0": "inBlogWithId",
          "1": "withQuery"
        }
      },
        "posts.list": {
            "paramNames": {
                "0": "forBlogId"
            }
        },
      "users.get": {
        "baseName": "getUser",
        "paramNames": {
          "0": "withId"
        }
      },
      "comments.markAsSpam": {
        "fullMethodName": "markCommentAsSpam(withId commentId: String, inPostWithId postId: String, blogId: String, completionHandler: @escaping (_ result: GoogleResult<BloggerComment>) -> ())"
      },
      "comments.removeContent": {
        "fullMethodName": "removeContentFromComment(withId commentId: String, inPostWithId postId: String, blogId: String, completionHandler: @escaping (_ result: GoogleResult<BloggerComment>) -> ())"
      },
      "comments.delete": {
        "fullMethodName": "deleteComment(withId commentId: String, fromPostWithId postId: String, blogId: String, completionHandler: @escaping (_ result: GoogleResult<Bool>) -> ())"
      },
      "comments.get": {
        "baseName": "getComment",
        "paramNames": {
          "0": "forId"
        }
      },
      "comments.list": {
        "paramNames": {
          "0": "forPostWithId"
        },
        "queryParams": {
          "fetchBodies": {
            "hasDefaultValue": true
          }
        }
      },
      "comments.approve": {
        "fullMethodName": "approveComment(withId commentId: String, forPostWithId postId: String, blogId: String, completionHandler: @escaping (_ result: GoogleResult<BloggerComment>) -> ())"
      },
      "comments.listByBlog": {
        "baseName": "listComments",
        "paramNames": {
          "0": "forBlogWithId"
        },
        "queryParams": {
          "fetchBodies": {
            "hasDefaultValue": true
          }
        }
      },
      "blogs.get": {
        "baseName": "getBlog",
        "paramNames": {
          "0": "forId"
        }
      },
      "blogs.listByUser": {
        "baseName": "listBlogs",
        "paramNames": {
          "0": "forUserWithId"
        }
      },
      "blogs.getByUrl": {
        "baseName": "getBlog",
        "paramNames": {
          "0": "fromURL"
        }
      },
      "pages.insert": {
        "baseName": "insertPage",
        "paramNames": {
          "0": "_",
          "1": "toBlogWithId"
        }
      },
      "pages.publish": {
        "fullMethodName": "publishPage(withId pageId: String, toBlogWithId blogId: String, completionHandler: @escaping (_ result: GoogleResult<BloggerPage>) -> ())"
      },
      "pages.delete": {
        "fullMethodName": "deletePage(withId pageId: String, fromBlogWithId blogId: String, completionHandler: @escaping (_ result: GoogleResult<Bool>) -> ())"
      },
      "pages.patch": {
        "baseName": "patchPage",
        "paramNames": {
          "0": "_",
          "1": "forPageWithId"
        }
      },
      "pages.update": {
        "baseName": "updatePage",
        "paramNames": {
          "0": "_",
          "1": "forPageWithId"
        }
      },
      "pages.get": {
        "fullMethodName": "getPage(forId pageId: String, fromBlogWithId blogId: String, completionHandler: @escaping (_ result: GoogleResult<BloggerPage>) -> ())"
      },
      "pages.revert": {
        "fullMethodName": "revertPage(withId pageId: String, inBlogWithId blogId: String, completionHandler: @escaping (_ result: GoogleResult<BloggerPage>) -> ())"
      },
      "pages.list": {
        "paramNames": {
          "0": "forBlogWithId"
        },
        "queryParams": {
          "fetchBodies": {
            "hasDefaultValue": true
          }
        }
      },
      "blogUserInfos.get": {
        "baseName": "getBlogUserInfo",
        "paramNames": {
          "0": "forBlogWithId"
        }
      }
    }
  }
}
